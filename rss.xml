<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>All posts</title>
        <link>https://infernoasura.github.io/</link>
        <description><![CDATA[Aditya Mundhara's personal blog]]></description>
        <atom:link href="https://infernoasura.github.io//rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 15 Jul 2025 00:00:00 UT</lastBuildDate>
        <item>
    <title>Machine Learning</title>
    <link>https://infernoasura.github.io//posts/2025-07-15-ML.html</link>
    <description><![CDATA[<h2 id="purity-and-impurity">Purity and Impurity</h2>
<p>A set of labels is pure if all the labels in that set belong to the same class.<br />
A set of labels is impure if the labels in that set belong to two or more different classes.</p>
<h2 id="gini-impurity">Gini Impurity</h2>
<p>Gini Impurity is the measure to calculate impurity of a set. It tells you what is the probability of classifying a data point to a wrong class based on the probability distribution of the classes in the dataset.<br />
In simple words, say, we have a dataset with two classes. Both have the same probability distribution, that is, both are 50% in the dataset. Now, if we pick a random point, and classify it into one of two classes, there is a 50% chance that the point might be misclassified. So the gini impurity is 0.5 .</p>
<p>The formula for gini impurity is<br />
<code>Gini Impurity = 1 - (p1^2 + p2^2 + ... + pn^2)</code><br />
where <code>p1, p2, ..., pn</code> are the probabilities of each class.</p>]]></description>
    <pubDate>Tue, 15 Jul 2025 00:00:00 UT</pubDate>
    <guid>https://infernoasura.github.io//posts/2025-07-15-ML.html</guid>
    <dc:creator>Aditya Mundhara</dc:creator>
</item>
<item>
    <title>Backend Development</title>
    <link>https://infernoasura.github.io//posts/2025-07-08-backend-development.html</link>
    <description><![CDATA[<h2 id="node.js">Node.js</h2>
<p>Node is a javascript based backend framework. We need to download it from there website. Once downloaded, there are two ways to use node for running javascript code: The node REPL (Read Eval Print Loop) and using the <code>node</code> keyword to run the .js file.</p>
<p>We type <code>node</code> on the terminal and just like in python, a console type thing will start in the terminal, where we can write javascript code like we write in chrome browser console. Use the .help command to get the commands which can be used in REPL. Now, if we have a index.js file, then type <code>node index.js</code> on the terminal, and the .js file will be executed.</p>
<h3 id="native-modules">Native modules</h3>
<p>Node has native modules in it, which can be used directly by us to get things done. For example, if we want to write in a file or read in a file through the .js file, we can use the <code>fs</code> native module. More info can be found on this site: <a href="https://nodejs.org/api/documentation.html">node</a>.</p>
<h3 id="node-package-manager-npm">Node package manager (npm)</h3>
<p>This is also like the native modules, except that this is something that is open source and created by other node users. <code>npm</code> comes pre-installed with node. To utilize <code>npm</code>, we have to type the command <code>npm init</code>, and then fill some details and we will see a <code>package.json</code> being created. Go to <a href="https://www.npmjs.com/">npm</a> and we can see the different packages that there are, out in the market. We can use these packages by choosing a package and then installing it.</p>
<p>There are two ways to use these modules (native and npm modules) in our .js file, one is through CJS (Common Javascript) and the other is ESM (ECMA Script Modules). CJS uses <code>require()</code> while ESM uses <code>import</code>.</p>
<h2 id="api-application-programming-interface">API (Application Programming Interface)</h2>
<p>API are set of rules and tools that allow communication between two different softwares. In simplest words, it allows a client (website/app) to interact with a server or a service.</p>
<p><img src="https://voyager.postman.com/illustration/diagram-what-is-an-api-postman-illustration.svg" /></p>
<h3 id="web-api-library-api">Web API &amp; Library API</h3>
<p>Web APIs like REST, GraphQL are a set of rules and endpoints that allows different applications to communicate with each other over the internet.<br />
Library API like python’s Math module, openmp, etc. are a set of functions, directives that allow us to perform specific tasks in our code.</p>
<h3 id="endpoints-path-and-query-parameters">Endpoints, Path and Query parameters</h3>
<p>So every API has a base url and multiple endpoints. So it is like this, <code>https://base-url.com/Endpoint</code>. Now there can different endpoints for different APIs for different functionality.</p>
<p>Path parameters are part of the URL itself. They’re used to identify a specific resource. <code>https://base-url.com/Endpoint/path-parameter</code>. Path parameter can be a unique key for each resource.</p>
<p>Query parameters are key-value pair added to the end of URL to filter, sort or customize the request. <code>https://base-url.com/Endpoint?type1=value1&amp;type2=value2</code>.</p>]]></description>
    <pubDate>Tue, 08 Jul 2025 00:00:00 UT</pubDate>
    <guid>https://infernoasura.github.io//posts/2025-07-08-backend-development.html</guid>
    <dc:creator>Aditya Mundhara</dc:creator>
</item>
<item>
    <title>Binary Search</title>
    <link>https://infernoasura.github.io//posts/2025-06-30-binary-search.html</link>
    <description><![CDATA[<p>Binary search is a searching algorithm used on arrays generally. The must condition before applying binary search is that the array must be sorted. The time complexity is O(log n), where n is the size of the array.</p>
<h1 id="implementation-of-binary-search">Implementation of Binary Search</h1>
<p>nums -&gt; the array itself <br>
Target -&gt; value to be searched in the array <br>
n -&gt; size of the array</p>
<p>Iterative</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> low <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> high <span class="op">=</span> nums<span class="op">.</span>size<span class="op">()</span> <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> mid <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">(</span>low <span class="op">&lt;=</span> high<span class="op">){</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>   mid <span class="op">=</span> <span class="op">(</span>high <span class="op">+</span> low<span class="op">)</span> <span class="op">/</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="op">(</span>nums<span class="op">[</span>mid<span class="op">]</span> <span class="op">==</span> target<span class="op">)</span> <span class="cf">return</span> mid<span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>   <span class="cf">else</span> <span class="cf">if</span><span class="op">(</span>nums<span class="op">[</span>mid<span class="op">]</span> <span class="op">&gt;</span> target<span class="op">)</span> high <span class="op">=</span> mid <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>   <span class="cf">else</span> low <span class="op">=</span> mid <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span></code></pre></div>
<p>Recursive</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> binsearch<span class="op">(</span><span class="dt">int</span> low<span class="op">,</span> <span class="dt">int</span> high<span class="op">,</span> vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> nums<span class="op">,</span> <span class="dt">int</span> target<span class="op">){</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>high <span class="op">&lt;</span> low<span class="op">)</span> <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> mid <span class="op">=</span> <span class="op">(</span>low <span class="op">+</span> high<span class="op">)</span> <span class="op">/</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>nums<span class="op">[</span>mid<span class="op">]</span> <span class="op">==</span> target<span class="op">)</span> <span class="cf">return</span> mid<span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">if</span><span class="op">(</span>nums<span class="op">[</span>mid<span class="op">]</span> <span class="op">&gt;</span> target<span class="op">)</span> <span class="cf">return</span> binsearch<span class="op">(</span>low<span class="op">,</span> mid <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> nums<span class="op">,</span> target<span class="op">);</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">return</span> binsearch<span class="op">(</span>mid <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> high<span class="op">,</span> nums<span class="op">,</span> target<span class="op">);</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> main<span class="op">(){</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> binsearch<span class="op">(</span><span class="dv">0</span><span class="op">,</span> n <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> nums<span class="op">,</span> target<span class="op">);</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>
<p>I have used
<code>mid = (low + high) / 2</code>
which is a bad practice. As, the addition of low and high might cause overflow. The good practice is to do this
<code>mid = ((high - low) / 2) + low</code></p>
<h1 id="upper-bound-and-lower-bound">Upper Bound and Lower Bound</h1>
<p>Upper bound of an element x is the number which is just greater than x in the array. <br/>
Lower bound of an element x is the number which is either equal to x or just greater than x in the array.</p>
<h1 id="implementation-of-upper-bound">Implementation of Upper bound</h1>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> low <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> high <span class="op">=</span> nums<span class="op">.</span>size<span class="op">()</span> <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> mid <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> index <span class="op">=</span> nums<span class="op">.</span>size<span class="op">();</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span><span class="op">(</span>low <span class="op">&lt;=</span> high<span class="op">){</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>            mid <span class="op">=</span> <span class="op">(</span>high <span class="op">-</span> low<span class="op">)</span> <span class="op">/</span> <span class="dv">2</span> <span class="op">+</span> low<span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(</span>nums<span class="op">[</span>mid<span class="op">]</span> <span class="op">&gt;</span> x<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>                index <span class="op">=</span> mid<span class="op">;</span> </span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>                high <span class="op">=</span> mid <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span> low <span class="op">=</span> mid <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> index<span class="op">;</span></span></code></pre></div>
<p>CPP STL:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> ub <span class="op">=</span> upper_bound<span class="op">(</span>nums<span class="op">.</span>begin<span class="op">(),</span> nums<span class="op">.</span>end<span class="op">(),</span> x<span class="op">);</span> <span class="co">// This will give the iterator pointing at the position of upper bound in array.</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>cout <span class="op">&lt;&lt;</span> <span class="op">*</span>ub <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// This will print the element which is upper bound of x</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>cout <span class="op">&lt;&lt;</span> ub <span class="op">-</span> nums<span class="op">.</span>begin<span class="op">()</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// This will give us the index of the element which is upper bound of x</span></span></code></pre></div>
<h1 id="implementation-of-lower-bound">Implementation of Lower bound</h1>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> low <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> high <span class="op">=</span> nums<span class="op">.</span>size<span class="op">()</span> <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> mid <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> index <span class="op">=</span> nums<span class="op">.</span>size<span class="op">();</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span><span class="op">(</span>low <span class="op">&lt;=</span> high<span class="op">){</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>            mid <span class="op">=</span> <span class="op">(</span>high <span class="op">-</span> low<span class="op">)</span> <span class="op">/</span> <span class="dv">2</span> <span class="op">+</span> low<span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(</span>nums<span class="op">[</span>mid<span class="op">]</span> <span class="op">&gt;=</span> x<span class="op">)</span> <span class="op">{</span>index <span class="op">=</span> mid<span class="op">;</span> high <span class="op">=</span> mid <span class="op">-</span> <span class="dv">1</span><span class="op">;}</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span> low <span class="op">=</span> mid <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> index<span class="op">;</span></span></code></pre></div>
<p>CPP STL:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> lb <span class="op">=</span> lower_bound<span class="op">(</span>nums<span class="op">.</span>begin<span class="op">(),</span> nums<span class="op">.</span>end<span class="op">(),</span> x<span class="op">);</span> <span class="co">// This will give the iterator pointing at the position of lower bound in array.</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>cout <span class="op">&lt;&lt;</span> <span class="op">*</span>lb <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// This will print the element which is lower bound of x</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>cout <span class="op">&lt;&lt;</span> lb <span class="op">-</span> nums<span class="op">.</span>begin<span class="op">()</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// This will give us the index of the element which is lower bound of x</span></span></code></pre></div>]]></description>
    <pubDate>Mon, 30 Jun 2025 00:00:00 UT</pubDate>
    <guid>https://infernoasura.github.io//posts/2025-06-30-binary-search.html</guid>
    <dc:creator>Aditya Mundhara</dc:creator>
</item>

    </channel>
</rss>
